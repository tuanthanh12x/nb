from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QLabel, QLineEdit, QComboBox, QPushButton,
    QFormLayout, QTableWidget, QTableWidgetItem, QMessageBox, QHeaderView,
    QHBoxLayout, QFrame, QGridLayout, QInputDialog
)
from PyQt5.QtCore import Qt, QSize
from functools import partial
import qtawesome as qta

# S·ª≠a l·∫°i import ƒë·ªÉ bao g·ªìm h√†m m·ªõi v√† c√°c h√†m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
from core.user_manager import get_all_users, add_user, delete_user, update_user_password


class UserManagementPage(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.init_ui()
        self._setup_connections()
        self._refresh_user_table()

    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán ng∆∞·ªùi d√πng."""
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(30, 20, 30, 30)
        main_layout.setSpacing(20)
        main_layout.setAlignment(Qt.AlignTop)

        # --- Ti√™u ƒë·ªÅ ch√≠nh v√† n√∫t T·∫£i l·∫°i ---
        title_layout = QHBoxLayout()
        title = QLabel("üë§ Qu·∫£n l√Ω Ng∆∞·ªùi d√πng")
        title.setObjectName("h2")
        title_layout.addWidget(title)
        title_layout.addStretch()
        self.refresh_btn = QPushButton(qta.icon("fa5s.sync-alt"), " T·∫£i l·∫°i")
        title_layout.addWidget(self.refresh_btn)
        main_layout.addLayout(title_layout)

        # --- B·ªë c·ª•c ch√≠nh v·ªõi 2 c·ªôt ---
        content_layout = QGridLayout()
        content_layout.setSpacing(20)
        main_layout.addLayout(content_layout)

        # --- C·ªôt 1: Form th√™m ng∆∞·ªùi d√πng ---
        form_card = QFrame()
        form_card.setObjectName("formCard")
        form_card_layout = QVBoxLayout(form_card)
        form_card_layout.setSpacing(15)

        form_title = QLabel("Th√™m ng∆∞·ªùi d√πng m·ªõi")
        form_title.setObjectName("h3")

        form = QFormLayout()
        self.username_input = QLineEdit()
        self.username_input.setPlaceholderText("Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p...")
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.Password)
        self.password_input.setPlaceholderText("Nh·∫≠p m·∫≠t kh·∫©u...")
        self.role_combo = QComboBox()
        self.role_combo.addItems(["Admin", "Guest"])  # Guest l√† vai tr√≤ c√≥ quy·ªÅn th·∫•p nh·∫•t

        form.addRow("T√™n ƒëƒÉng nh·∫≠p:", self.username_input)
        form.addRow("M·∫≠t kh·∫©u:", self.password_input)
        form.addRow("Vai tr√≤:", self.role_combo)

        self.add_btn = QPushButton(qta.icon("fa5s.user-plus", color="white"), "  Th√™m m·ªõi")
        self.add_btn.setObjectName("submitButton")

        form_card_layout.addWidget(form_title)
        form_card_layout.addLayout(form)
        form_card_layout.addWidget(self.add_btn, 0, Qt.AlignRight)
        form_card_layout.addStretch()

        content_layout.addWidget(form_card, 0, 0)

        # --- C·ªôt 2: B·∫£ng danh s√°ch ng∆∞·ªùi d√πng ---
        table_card = QFrame()
        table_card.setObjectName("formCard")
        table_card_layout = QVBoxLayout(table_card)

        self.user_table = QTableWidget()
        self.user_table.setColumnCount(4)
        self.user_table.setHorizontalHeaderLabels(["ID", "T√™n ƒëƒÉng nh·∫≠p", "Vai tr√≤", "H√†nh ƒë·ªông"])
        self.user_table.setColumnHidden(0, True)  # ·∫®n c·ªôt ID
        self.user_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.Stretch)
        self.user_table.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeToContents)
        self.user_table.horizontalHeader().setSectionResizeMode(3, QHeaderView.ResizeToContents)
        self.user_table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.user_table.setSelectionBehavior(QTableWidget.SelectRows)

        table_card_layout.addWidget(self.user_table)
        content_layout.addWidget(table_card, 0, 1)

        content_layout.setColumnStretch(0, 1)  # Form co gi√£n 1 ph·∫ßn
        content_layout.setColumnStretch(1, 2)  # B·∫£ng co gi√£n 2 ph·∫ßn

    def _setup_connections(self):
        """K·∫øt n·ªëi c√°c t√≠n hi·ªáu (signals) t·ªõi c√°c khe (slots)."""
        self.add_btn.clicked.connect(self._handle_add_user)
        self.refresh_btn.clicked.connect(self._refresh_user_table)

    def _refresh_user_table(self):
        """L√†m m·ªõi d·ªØ li·ªáu trong b·∫£ng ng∆∞·ªùi d√πng."""
        self.user_table.setRowCount(0)
        try:
            users = get_all_users()
        except Exception as e:
            QMessageBox.critical(self, "L·ªói c∆° s·ªü d·ªØ li·ªáu", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng:\n{e}")
            return

        for user in users:
            row_position = self.user_table.rowCount()
            self.user_table.insertRow(row_position)

            self.user_table.setItem(row_position, 0, QTableWidgetItem(str(user["id"])))
            self.user_table.setItem(row_position, 1, QTableWidgetItem(user["username"]))
            self.user_table.setItem(row_position, 2, QTableWidgetItem(user["role"]))

            # T·∫°o widget ch·ª©a c√°c n√∫t h√†nh ƒë·ªông
            actions_widget = QWidget()
            actions_layout = QHBoxLayout(actions_widget)
            actions_layout.setContentsMargins(5, 0, 5, 0)
            actions_layout.setSpacing(5)

            # N√∫t ƒë·ªïi m·∫≠t kh·∫©u
            change_pw_btn = QPushButton(qta.icon("fa5s.key"), "")
            change_pw_btn.setToolTip("ƒê·ªïi m·∫≠t kh·∫©u")
            change_pw_btn.setCursor(Qt.PointingHandCursor)
            # N√∫t x√≥a
            delete_btn = QPushButton(qta.icon("fa5s.trash-alt"), "")
            delete_btn.setToolTip("X√≥a ng∆∞·ªùi d√πng")
            delete_btn.setObjectName("deleteButton")  # ƒê·ªÉ c√≥ style ri√™ng n·∫øu mu·ªën
            delete_btn.setCursor(Qt.PointingHandCursor)

            # K·∫øt n·ªëi s·ª± ki·ªán v·ªõi ID v√† username c·ª• th·ªÉ c·ªßa h√†ng ƒë√≥
            change_pw_btn.clicked.connect(partial(self._handle_change_password, user["id"], user["username"]))
            delete_btn.clicked.connect(partial(self._handle_delete_user, user["id"], user["username"]))

            actions_layout.addWidget(change_pw_btn)
            actions_layout.addWidget(delete_btn)
            actions_layout.addStretch()

            self.user_table.setCellWidget(row_position, 3, actions_widget)

    def _handle_add_user(self):
        """X·ª≠ l√Ω logic khi nh·∫•n n√∫t th√™m ng∆∞·ªùi d√πng."""
        username = self.username_input.text().strip()
        password = self.password_input.text().strip()
        role = self.role_combo.currentText()

        if not username or not password:
            QMessageBox.warning(self, "Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u.")
            return

        success, msg = add_user(username, password, role)
        if success:
            QMessageBox.information(self, "Th√†nh c√¥ng", msg)
            self.username_input.clear()
            self.password_input.clear()
            self._refresh_user_table()
        else:
            QMessageBox.critical(self, "Th·∫•t b·∫°i", msg)

    def _handle_delete_user(self, user_id, username):
        """X·ª≠ l√Ω logic khi nh·∫•n n√∫t x√≥a ng∆∞·ªùi d√πng."""
        confirm = QMessageBox.question(self, "X√°c nh·∫≠n x√≥a",
                                       f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng '{username}' kh√¥ng?",
                                       QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if confirm == QMessageBox.Yes:
            success, msg = delete_user(user_id)
            if success:
                QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ x√≥a ng∆∞·ªùi d√πng '{username}'.")
                self._refresh_user_table()
            else:
                QMessageBox.critical(self, "L·ªói", msg)

    def _handle_change_password(self, user_id, username):
        """X·ª≠ l√Ω logic khi nh·∫•n n√∫t ƒë·ªïi m·∫≠t kh·∫©u."""
        new_password, ok = QInputDialog.getText(self, "ƒê·ªïi m·∫≠t kh·∫©u", f"Nh·∫≠p m·∫≠t kh·∫©u m·ªõi cho '{username}':",
                                                QLineEdit.Password)

        if ok and new_password:
            success, msg = update_user_password(user_id, new_password)
            if success:
                QMessageBox.information(self, "Th√†nh c√¥ng", msg)
            else:
                QMessageBox.critical(self, "L·ªói", msg)
        elif ok and not new_password:
            QMessageBox.warning(self, "H·ªßy b·ªè", "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")


# H√†m ƒë·ªÉ g·ªçi t·ª´ b√™n ngo√†i (n·∫øu c·∫ßn)
def create_user_management_page():
    return UserManagementPage()