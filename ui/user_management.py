# ui/user_management.py

from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLabel,
    QTableWidget, QTableWidgetItem, QHeaderView, QMessageBox,
    QDialog, QFormLayout, QLineEdit, QComboBox, QDialogButtonBox
)
from PyQt5.QtCore import Qt, pyqtSignal
import qtawesome as qta
import bcrypt

from db.database import get_db_session, User


class UserDialog(QDialog):
    """C·ª≠a s·ªï dialog ƒë·ªÉ th√™m ho·∫∑c s·ª≠a th√¥ng tin ng∆∞·ªùi d√πng."""
    # T√≠n hi·ªáu s·∫Ω ƒë∆∞·ª£c ph√°t ra khi l∆∞u th√†nh c√¥ng
    user_saved = pyqtSignal()

    def __init__(self, user_id=None, parent=None):
        super().__init__(parent)
        self.user_id = user_id
        self.is_edit_mode = user_id is not None
        self.setWindowTitle("S·ª≠a Ng∆∞·ªùi d√πng" if self.is_edit_mode else "Th√™m Ng∆∞·ªùi d√πng m·ªõi")
        self.setMinimumWidth(400)

        layout = QVBoxLayout(self)
        form_layout = QFormLayout()

        self.username_input = QLineEdit()
        self.full_name_input = QLineEdit()
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.Password)
        self.role_combo = QComboBox()
        self.role_combo.addItems(["user", "admin"])

        form_layout.addRow("T√™n ƒëƒÉng nh·∫≠p:", self.username_input)
        form_layout.addRow("H·ªç v√† T√™n:", self.full_name_input)
        pwd_label = "M·∫≠t kh·∫©u (b·ªè tr·ªëng n·∫øu kh√¥ng ƒë·ªïi):" if self.is_edit_mode else "M·∫≠t kh·∫©u:"
        form_layout.addRow(pwd_label, self.password_input)
        form_layout.addRow("Vai tr√≤:", self.role_combo)

        layout.addLayout(form_layout)

        # N√∫t Save v√† Cancel
        self.button_box = QDialogButtonBox(QDialogButtonBox.Save | QDialogButtonBox.Cancel)
        self.button_box.accepted.connect(self.accept)
        self.button_box.rejected.connect(self.reject)
        layout.addWidget(self.button_box)

        if self.is_edit_mode:
            self.load_user_data()

    def load_user_data(self):
        """T·∫£i d·ªØ li·ªáu c·ªßa ng∆∞·ªùi d√πng v√†o form ƒë·ªÉ ch·ªânh s·ª≠a."""
        session = next(get_db_session())
        user = session.query(User).filter_by(id=self.user_id).first()
        session.close()

        if user:
            self.username_input.setText(user.username)
            self.username_input.setReadOnly(True)  # Kh√¥ng cho s·ª≠a username
            self.full_name_input.setText(user.full_name)
            self.role_combo.setCurrentText(user.role)

    def accept(self):
        """X·ª≠ l√Ω khi nh·∫•n n√∫t Save."""
        session = next(get_db_session())
        try:
            username = self.username_input.text().strip()
            full_name = self.full_name_input.text().strip()
            password = self.password_input.text()
            role = self.role_combo.currentText()

            if not username or not full_name:
                QMessageBox.warning(self, "L·ªói", "T√™n ƒëƒÉng nh·∫≠p v√† H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
                return

            if self.is_edit_mode:
                # Ch·∫ø ƒë·ªô S·ª≠a
                user = session.query(User).filter_by(id=self.user_id).first()
                user.full_name = full_name
                user.role = role
                if password:  # Ch·ªâ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u n·∫øu ng∆∞·ªùi d√πng nh·∫≠p
                    user.set_password(password)
            else:
                # Ch·∫ø ƒë·ªô Th√™m m·ªõi
                if not password:
                    QMessageBox.warning(self, "L·ªói", "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng khi t·∫°o m·ªõi.")
                    return
                # Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i ch∆∞a
                existing_user = session.query(User).filter_by(username=username).first()
                if existing_user:
                    QMessageBox.warning(self, "L·ªói", "T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i.")
                    return

                new_user = User(username=username, full_name=full_name, role=role)
                new_user.set_password(password)
                session.add(new_user)

            session.commit()
            self.user_saved.emit()  # Ph√°t t√≠n hi·ªáu
            super().accept()  # ƒê√≥ng dialog
        except Exception as e:
            session.rollback()
            QMessageBox.critical(self, "L·ªói CSDL", f"ƒê√£ c√≥ l·ªói x·∫£y ra: {e}")
        finally:
            session.close()


class UserManagementPage(QWidget):
    """Trang qu·∫£n l√Ω ng∆∞·ªùi d√πng."""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.main_window = parent  # Tham chi·∫øu t·ªõi c·ª≠a s·ªï ch√≠nh

        layout = QVBoxLayout(self)
        layout.setContentsMargins(30, 20, 30, 30)
        layout.setSpacing(20)

        # --- Ti√™u ƒë·ªÅ v√† N√∫t h√†nh ƒë·ªông ---
        header_layout = QHBoxLayout()
        title = QLabel("Qu·∫£n l√Ω Ng∆∞·ªùi d√πng üë•")
        title.setObjectName("h2")
        header_layout.addWidget(title)
        header_layout.addStretch()

        self.add_btn = QPushButton(" Th√™m ng∆∞·ªùi d√πng")
        self.add_btn.setIcon(qta.icon("fa5s.user-plus", color="white"))
        self.add_btn.setObjectName("submitButton")
        self.add_btn.clicked.connect(self.add_user)
        header_layout.addWidget(self.add_btn)

        layout.addLayout(header_layout)

        # --- B·∫£ng hi·ªÉn th·ªã ng∆∞·ªùi d√πng ---
        self.user_table = QTableWidget()
        self.user_table.setColumnCount(5)
        self.user_table.setHorizontalHeaderLabels(["ID", "T√™n ƒëƒÉng nh·∫≠p", "H·ªç v√† T√™n", "Vai tr√≤", "H√†nh ƒë·ªông"])
        self.user_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.user_table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.user_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.user_table.verticalHeader().setVisible(False)
        layout.addWidget(self.user_table)

        self.load_users()

    def load_users(self):
        """T·∫£i danh s√°ch ng∆∞·ªùi d√πng t·ª´ CSDL v√†o b·∫£ng."""
        self.user_table.setRowCount(0)
        session = next(get_db_session())
        users = session.query(User).all()
        session.close()

        for row, user in enumerate(users):
            self.user_table.insertRow(row)
            self.user_table.setItem(row, 0, QTableWidgetItem(str(user.id)))
            self.user_table.setItem(row, 1, QTableWidgetItem(user.username))
            self.user_table.setItem(row, 2, QTableWidgetItem(user.full_name))
            self.user_table.setItem(row, 3, QTableWidgetItem(user.role))

            # T·∫°o c√°c n√∫t h√†nh ƒë·ªông
            action_widget = self._create_action_buttons(user.id)
            self.user_table.setCellWidget(row, 4, action_widget)

        self.user_table.resizeRowsToContents()

    def _create_action_buttons(self, user_id):
        """T·∫°o c√°c n√∫t S·ª≠a v√† X√≥a cho m·ªói d√≤ng."""
        widget = QWidget()
        layout = QHBoxLayout(widget)
        layout.setContentsMargins(5, 0, 5, 0)
        layout.setSpacing(5)

        edit_btn = QPushButton()
        edit_btn.setIcon(qta.icon("fa5s.edit", color="#F59E0B"))
        edit_btn.setToolTip("S·ª≠a ng∆∞·ªùi d√πng")
        edit_btn.clicked.connect(lambda: self.edit_user(user_id))

        delete_btn = QPushButton()
        delete_btn.setIcon(qta.icon("fa5s.trash-alt", color="#EF4444"))
        delete_btn.setToolTip("X√≥a ng∆∞·ªùi d√πng")
        delete_btn.clicked.connect(lambda: self.delete_user(user_id))

        layout.addWidget(edit_btn)
        layout.addWidget(delete_btn)
        layout.addStretch()
        widget.setLayout(layout)
        return widget

    def add_user(self):
        """M·ªü dialog ƒë·ªÉ th√™m ng∆∞·ªùi d√πng m·ªõi."""
        dialog = UserDialog(parent=self)
        dialog.user_saved.connect(self.load_users)  # K·∫øt n·ªëi t√≠n hi·ªáu ƒë·ªÉ reload b·∫£ng
        dialog.exec_()

    def edit_user(self, user_id):
        """M·ªü dialog ƒë·ªÉ s·ª≠a th√¥ng tin ng∆∞·ªùi d√πng."""
        dialog = UserDialog(user_id=user_id, parent=self)
        dialog.user_saved.connect(self.load_users)
        dialog.exec_()

    def delete_user(self, user_id):
        """X√≥a ng∆∞·ªùi d√πng kh·ªèi CSDL sau khi x√°c nh·∫≠n."""
        session = next(get_db_session())
        user_to_delete = session.query(User).filter_by(id=user_id).first()

        if not user_to_delete:
            session.close()
            return

        # Kh√¥ng cho x√≥a ch√≠nh m√¨nh
        if user_to_delete.username.lower() == self.main_window.current_user.lower():
            QMessageBox.warning(self, "Kh√¥ng th·ªÉ x√≥a", "B·∫°n kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n ƒëang ƒëƒÉng nh·∫≠p.")
            session.close()
            return

        reply = QMessageBox.question(self, 'X√°c nh·∫≠n x√≥a',
                                     f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng '{user_to_delete.username}' kh√¥ng?",
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)

        if reply == QMessageBox.Yes:
            try:
                session.delete(user_to_delete)
                session.commit()
                self.load_users()  # T·∫£i l·∫°i b·∫£ng
                QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ x√≥a ng∆∞·ªùi d√πng '{user_to_delete.username}'.")
            except Exception as e:
                session.rollback()
                QMessageBox.critical(self, "L·ªói CSDL", f"Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng: {e}")
            finally:
                session.close()
        else:
            session.close()


def create_user_management_page(parent):
    """H√†m kh·ªüi t·∫°o ƒë·ªÉ d·ªÖ d√†ng g·ªçi t·ª´ c·ª≠a s·ªï ch√≠nh."""
    return UserManagementPage(parent)